# config/config.py

import os
from typing import Dict, Any
from pathlib import Path
from dataclasses import dataclass
from dotenv import load_dotenv

@dataclass
class MLConfig:
    MODEL_PATH: Path
    RANDOM_STATE: int
    TRAIN_TEST_SPLIT: float
    MIN_SAMPLES: int
    MAX_FEATURES: int
    FEATURE_SELECTION: bool
    MODEL_VERSION: str

@dataclass
class AnalysisConfig:
    TIMEOUT: int
    MAX_MEMORY: int
    MAX_FILE_SIZE: int
    ALLOWED_EXTENSIONS: list
    SANDBOX_ENABLED: bool
    VM_CHECK_REQUIRED: bool
    CAPTURE_NETWORK: bool
    MEMORY_ANALYSIS: bool

@dataclass
class APIConfig:
    VIRUSTOTAL_API_KEY: str
    ALIENVAULT_API_KEY: str
    MALWAREBAZAAR_API_KEY: str
    HYBRID_ANALYSIS_API_KEY: str
    API_RATE_LIMIT: int
    API_TIMEOUT: int

@dataclass
class SystemConfig:
    BASE_DIR: Path
    SAMPLE_DIR: Path
    MEMORY_DUMPS_DIR: Path
    REPORTS_DIR: Path
    LOGS_DIR: Path
    MODELS_DIR: Path
    YARA_RULES_DIR: Path
    TEMP_DIR: Path
    DATABASE_PATH: Path

class Config:
    def __init__(self):
        load_dotenv()
        self.system = self._init_system_config()
        self.analysis = self._init_analysis_config()
        self.api = self._init_api_config()
        self.ml = self._init_ml_config()
        self._create_directories()

    def _init_system_config(self) -> SystemConfig:
        base_dir = Path(os.getenv('BASE_DIR', os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
        
        return SystemConfig(
            BASE_DIR=base_dir,
            SAMPLE_DIR=base_dir / 'data' / 'samples',
            MEMORY_DUMPS_DIR=base_dir / 'data' / 'memory_dumps',
            REPORTS_DIR=base_dir / 'data' / 'reports',
            LOGS_DIR=base_dir / 'data' / 'logs',
            MODELS_DIR=base_dir / 'data' / 'models',
            YARA_RULES_DIR=base_dir / 'data' / 'yara_rules',
            TEMP_DIR=base_dir / 'data' / 'temp',
            DATABASE_PATH=base_dir / 'data' / 'analysis.db'
        )

    def _init_analysis_config(self) -> AnalysisConfig:
        return AnalysisConfig(
            TIMEOUT=int(os.getenv('ANALYSIS_TIMEOUT', 300)),
            MAX_MEMORY=int(os.getenv('MAX_MEMORY', 1024 * 1024 * 1024)),
            MAX_FILE_SIZE=int(os.getenv('MAX_FILE_SIZE', 100 * 1024 * 1024)),
            ALLOWED_EXTENSIONS=os.getenv('ALLOWED_EXTENSIONS', '.exe,.dll,.pdf,.doc,.docx').split(','),
            SANDBOX_ENABLED=os.getenv('SANDBOX_ENABLED', 'True').lower() == 'true',
            VM_CHECK_REQUIRED=os.getenv('VM_CHECK_REQUIRED', 'True').lower() == 'true',
            CAPTURE_NETWORK=os.getenv('CAPTURE_NETWORK', 'True').lower() == 'true',
            MEMORY_ANALYSIS=os.getenv('MEMORY_ANALYSIS', 'True').lower() == 'true'
        )

    def _init_api_config(self) -> APIConfig:
        return APIConfig(
            VIRUSTOTAL_API_KEY=os.getenv('VIRUSTOTAL_API_KEY', ''),
            ALIENVAULT_API_KEY=os.getenv('ALIENVAULT_API_KEY', ''),
            MALWAREBAZAAR_API_KEY=os.getenv('MALWAREBAZAAR_API_KEY', ''),
            HYBRID_ANALYSIS_API_KEY=os.getenv('HYBRID_ANALYSIS_API_KEY', ''),
            API_RATE_LIMIT=int(os.getenv('API_RATE_LIMIT', 4)),
            API_TIMEOUT=int(os.getenv('API_TIMEOUT', 30))
        )

    def _init_ml_config(self) -> MLConfig:
        return MLConfig(
            MODEL_PATH=self.system.MODELS_DIR,
            RANDOM_STATE=int(os.getenv('RANDOM_STATE', 42)),
            TRAIN_TEST_SPLIT=float(os.getenv('TRAIN_TEST_SPLIT', 0.2)),
            MIN_SAMPLES=int(os.getenv('MIN_SAMPLES', 1000)),
            MAX_FEATURES=int(os.getenv('MAX_FEATURES', 100)),
            FEATURE_SELECTION=os.getenv('FEATURE_SELECTION', 'True').lower() == 'true',
            MODEL_VERSION=os.getenv('MODEL_VERSION', '1.0.0')
        )

    def _create_directories(self):
        for path in [
            self.system.SAMPLE_DIR,
            self.system.MEMORY_DUMPS_DIR,
            self.system.REPORTS_DIR,
            self.system.LOGS_DIR,
            self.system.MODELS_DIR,
            self.system.YARA_RULES_DIR,
            self.system.TEMP_DIR
        ]:
            path.mkdir(parents=True, exist_ok=True)

    def validate(self) -> bool:
        try:
            for path in [
                self.system.SAMPLE_DIR,
                self.system.MEMORY_DUMPS_DIR,
                self.system.REPORTS_DIR,
                self.system.LOGS_DIR,
                self.system.MODELS_DIR
            ]:
                if not path.exists():
                    return False

            if self.analysis.SANDBOX_ENABLED:
                if not any([
                    self.api.VIRUSTOTAL_API_KEY,
                    self.api.ALIENVAULT_API_KEY
                ]):
                    return False
            return True
        except Exception:
            return False

    def get_ml_config(self) -> Dict[str, Any]:
        return {
            'model_path': str(self.ml.MODEL_PATH),
            'random_state': self.ml.RANDOM_STATE,
            'train_test_split': self.ml.TRAIN_TEST_SPLIT,
            'feature_selection': self.ml.FEATURE_SELECTION,
            'model_version': self.ml.MODEL_VERSION
        }

    def get_analysis_config(self) -> Dict[str, Any]:
        return {
            'timeout': self.analysis.TIMEOUT,
            'max_memory': self.analysis.MAX_MEMORY,
            'max_file_size': self.analysis.MAX_FILE_SIZE,
            'allowed_extensions': self.analysis.ALLOWED_EXTENSIONS,
            'sandbox_enabled': self.analysis.SANDBOX_ENABLED,
            'vm_check_required': self.analysis.VM_CHECK_REQUIRED
        }