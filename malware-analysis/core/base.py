# core/base.py

from abc import ABC, abstractmethod
from typing import Dict
from datetime import datetime
from utils.logging_utils import setup_logging

class AnalyzerBase(ABC):
    
    def __init__(self):
        self.logger = setup_logging('data/logs')
        self.results: Dict = {}
        self.start_time: datetime = None
        self.end_time: datetime = None

    @abstractmethod
    def analyze(self) -> Dict:
        pass

    def _start_analysis(self):
        self.start_time = datetime.now()
        self.logger.info(f"Starting {self.__class__.__name__} analysis")

    def _end_analysis(self):
        self.end_time = datetime.now()
        duration = (self.end_time - self.start_time).total_seconds()
        self.logger.info(f"Completed {self.__class__.__name__} analysis in {duration:.2f} seconds")

    def _add_metadata(self):
        return {
            'analyzer': self.__class__.__name__,
            'start_time': self.start_time.isoformat(),
            'end_time': self.end_time.isoformat(),
            'duration': (self.end_time - self.start_time).total_seconds()
        }