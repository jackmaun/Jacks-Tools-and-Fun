# core/intel.py

import aiohttp
import asyncio
from typing import Dict, List
from datetime import datetime
from utils.logging_utils import setup_logging
from utils.hash_utils import calculate_hashes
from utils.string_utils import extract_iocs
from .base import AnalyzerBase

class IntelAnalyzer(AnalyzerBase):

    def __init__(self, api_keys: Dict[str, str]):
        super().__init__()
        self.api_keys = api_keys
        self.logger = setup_logging('data/logs')
        self.vt_api_key = api_keys.get('virustotal')
        self.alien_api_key = api_keys.get('alienvault')
        
    async def analyze(self, sample_path: str) -> Dict:
        try:
            self.logger.info(f"Starting threat intelligence analysis for {sample_path}")
            hashes = calculate_hashes(sample_path)
            
            iocs = extract_iocs(sample_path)
            
            results = {
                'virustotal': await self._check_virustotal(hashes['sha256']),
                'alienvault': await self._check_alienvault(hashes['sha256']),
                'extracted_iocs': iocs,
                'timestamp': datetime.now().isoformat()
            }
            
            self.logger.info("Threat intelligence analysis completed")
            return results
            
        except Exception as e:
            self.logger.error(f"Threat intelligence analysis failed: {str(e)}")
            return {'error': str(e)}

    async def _check_virustotal(self, file_hash: str) -> Dict:
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'x-apikey': self.vt_api_key}
                url = f'https://www.virustotal.com/api/v3/files/{file_hash}'
                
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        self.logger.warning(f"VirusTotal API error: {response.status}")
                        return {'error': f'API returned status {response.status}'}
        except Exception as e:
            self.logger.error(f"VirusTotal query failed: {str(e)}")
            return {'error': str(e)}