# core/network_analyzer.py

from scapy.all import sniff, wrpcap
from typing import Dict, List
import json
from datetime import datetime
from utils.logging_utils import setup_logging
from utils.file_utils import create_safe_directory
from utils.string_utils import extract_iocs
from .base import AnalyzerBase

class NetworkAnalyzer(AnalyzerBase):

    def __init__(self, interface: str = "any"):
        super().__init__()
        self.interface = interface
        self.logger = setup_logging('data/logs')
        self.output_dir = 'data/network_captures'
        self.packets = []
        self.connections = set()

    def analyze(self) -> Dict:
        try:
            self.logger.info("Starting network traffic analysis")
            
            create_safe_directory(self.output_dir)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            self.pcap_file = f"{self.output_dir}/capture_{timestamp}.pcap"
            self._capture_traffic()
            results = self._analyze_capture()
            
            results['network_iocs'] = self._extract_network_iocs()
            
            self.logger.info("Network analysis completed successfully")
            return results
            
        except Exception as e:
            self.logger.error(f"Network analysis failed: {str(e)}")
            return {'error': str(e)}

    def _capture_traffic(self, timeout: int = 60):
        try:
            self.logger.info(f"Starting packet capture on interface {self.interface}")
            sniff(iface=self.interface, prn=self._packet_callback, timeout=timeout)
            wrpcap(self.pcap_file, self.packets)
        except Exception as e:
            self.logger.error(f"Packet capture failed: {str(e)}")
            raise