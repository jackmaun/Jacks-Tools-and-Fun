# core/orchestrator.py

from typing import Dict
import asyncio
from datetime import datetime
from utils.logging_utils import setup_logging
from utils.sandbox_utils import isolate_network, restore_network
from utils.file_utils import safe_file_copy, create_safe_directory
from .static_analyzer import StaticAnalyzer
from .dynamic_analyzer import DynamicAnalyzer
from .memory_analyzer import MemoryAnalyzer
from .network_analyzer import NetworkAnalyzer
from .ml_detector import MLDetector

class MalwareAnalysisOrchestrator:

    def __init__(self, config: Dict):
        self.config = config
        self.logger = setup_logging('data/logs')
        self.setup_environment()

    def setup_environment(self):
        try:
            directories = [
                'data/samples',
                'data/memory_dumps',
                'data/reports',
                'data/workspace'
            ]
            for directory in directories:
                create_safe_directory(directory)
        except Exception as e:
            self.logger.error(f"Environment setup failed: {str(e)}")
            raise

    async def run_analysis(self, sample_path: str) -> Dict:
        try:
            self.logger.info(f"Starting analysis of {sample_path}")
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            work_dir = f"data/workspace/analysis_{timestamp}"
            create_safe_directory(work_dir)
            sample_copy = f"{work_dir}/sample"
            if not safe_file_copy(sample_path, sample_copy):
                raise Exception("Failed to copy sample")

            results = {}
        
            static = StaticAnalyzer(sample_copy)
            results['static'] = await asyncio.to_thread(static.analyze)
            
            if 'error' not in results['static']:
                dynamic = DynamicAnalyzer(sample_copy)
                results['dynamic'] = await asyncio.to_thread(dynamic.analyze)
                
                memory = MemoryAnalyzer(sample_copy)
                results['memory'] = await asyncio.to_thread(memory.analyze)
                
                network = NetworkAnalyzer()
                results['network'] = await asyncio.to_thread(network.analyze)
                
                ml = MLDetector()
                results['ml'] = await asyncio.to_thread(ml.analyze, sample_copy)
            return results

        except Exception as e:
            self.logger.error(f"Analysis orchestration failed: {str(e)}")
            return {'error': str(e)}