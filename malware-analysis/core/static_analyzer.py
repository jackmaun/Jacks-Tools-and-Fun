# core/static_analyzer.py

from typing import Dict, List
import pefile
# import yara
from datetime import datetime
from utils.hash_utils import calculate_hashes
from utils.string_utils import extract_iocs
from utils.file_utils import safe_file_copy
from utils.logging_utils import setup_logging
from .base import AnalyzerBase

class StaticAnalyzer(AnalyzerBase):
    
    def __init__(self, sample_path: str):
        super().__init__()
        self.sample_path = sample_path
        self.logger = setup_logging('data/logs')
        self.results = {}

    def analyze(self) -> Dict:
        try:
            self.logger.info(f"Starting static analysis of {self.sample_path}")
            
            self.results = {
                'file_info': self._get_file_info(),
                'hashes': calculate_hashes(self.sample_path),
                'strings_analysis': self._analyze_strings(),
                'pe_info': self._analyze_pe_file(),
                'yara_matches': self._scan_yara(),
                'iocs': self._extract_iocs(),
            }
            
            self.logger.info("Static analysis completed successfully")
            return self.results
            
        except Exception as e:
            self.logger.error(f"Static analysis failed: {str(e)}")
            return {'error': str(e)}

    def _analyze_pe_file(self) -> Dict:
        try:
            pe = pefile.PE(self.sample_path)
            return {
                'file_type': 'PE',
                'machine_type': pe.FILE_HEADER.Machine,
                'time_date_stamp': pe.FILE_HEADER.TimeDateStamp,
                'number_of_sections': len(pe.sections),
                'number_of_imports': len(pe.DIRECTORY_ENTRY_IMPORT) if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else 0,
                'number_of_exports': len(pe.DIRECTORY_ENTRY_EXPORT.symbols) if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') else 0,
                'has_debug': 1 if hasattr(pe, 'DIRECTORY_ENTRY_DEBUG') else 0,
                'has_tls': 1 if hasattr(pe, 'DIRECTORY_ENTRY_TLS') else 0,
                'has_resources': 1 if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE') else 0,
                'has_signature': 1 if hasattr(pe, 'DIRECTORY_ENTRY_SECURITY') else 0,
                'has_relocation': 1 if hasattr(pe, 'DIRECTORY_ENTRY_BASERELOC') else 0
            }
        except Exception as e:
            self.logger.error(f"PE file analysis failed: {str(e)}")
            return {}

    def _extract_iocs(self) -> Dict[str, List[str]]:
        with open(self.sample_path, 'rb') as f:
            content = f.read()
            try:
                text_content = content.decode('utf-8', errors='ignore')
                return extract_iocs(text_content)
            except Exception as e:
                self.logger.error(f"IOC extraction failed: {str(e)}")
                return {}