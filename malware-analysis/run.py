import asyncio
import argparse
import signal
import sys
import os
from datetime import datetime
from pathlib import Path
import json
from rich.console import Console
from core import (
    AnalyzerBase, StaticAnalyzer, DynamicAnalyzer, MemoryAnalyzer,
    NetworkAnalyzer, IntelAnalyzer, MLDetector, MalwareAnalysisOrchestrator
)
from config.config import Config

console = Console()
last_sigint_time = 0

def signal_handler(signum, frame):
    global last_sigint_time
    current_time = time.time()
   
    if current_time - last_sigint_time < 1:
        console.print("\n[bold red]Force quitting...[/bold red]")
        sys.exit(1)
   
    last_sigint_time = current_time
    console.print("\n[yellow]Press Ctrl+C again within 1 second to force quit[/yellow]")
    console.print("[yellow]Attempting graceful shutdown...[/yellow]")

async def main():
    signal.signal(signal.SIGINT, signal_handler)

    parser = argparse.ArgumentParser(description='Malware Analysis System')
    parser.add_argument('--sample', '-s', type=str, help='Path to malware sample')
    parser.add_argument('--directory', '-d', type=str, help='Directory containing samples')
    args = parser.parse_args()

    if not args.sample and not args.directory:
        console.print("[bold red]Error: Please provide either --sample or --directory argument[/bold red]")
        parser.print_help()
        return

    config = Config()
    report_dir = Path('data', 'reports')
    report_dir.mkdir(parents=True, exist_ok=True)

    samples = []
    if args.sample:
        samples.append(Path(args.sample))
    elif args.directory:
        samples.extend(Path(args.directory).glob('*'))

    if not samples:
        console.print("[bold red]No samples found to analyze[/bold red]")
        return

    try:
        orchestrator = MalwareAnalysisOrchestrator(config)

        for sample_path in samples:
            console.print(f"[bold blue]Analyzing: {sample_path}[/bold blue]")
            results = await orchestrator.run_analysis(str(sample_path))

            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            report_path = report_dir / f"report_{sample_path.stem}_{timestamp}.json"

            with open(report_path, 'w') as f:
                json.dump(results, f, indent=2)

            console.print(f"[green]Analysis complete. Report saved to: {report_path}[/green]")

    except KeyboardInterrupt:
        console.print("\n[bold red]Analysis interrupted by user[/bold red]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[bold red]Fatal error: {str(e)}[/bold red]")
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\n[bold red]Program terminated by user[/bold red]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[bold red]Fatal error: {str(e)}[/bold red]")
        sys.exit(1)