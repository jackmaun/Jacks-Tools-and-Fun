# test_all.py

import os
import sys
import asyncio
import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple

# Core imports
from core.orchestrator import MalwareAnalysisOrchestrator
from core.static_analyzer import StaticAnalyzer
from core.dynamic_analyzer import DynamicAnalyzer
from core.memory_analyzer import MemoryAnalyzer
from core.network_analyzer import NetworkAnalyzer
from core.ml_detector import MLDetector
from core.intel import IntelAnalyzer

# Utility imports
from utils.logging_utils import setup_logging
from utils.file_utils import create_safe_directory, safe_file_copy
from utils.hash_utils import calculate_hashes
from utils.string_utils import extract_iocs
from utils.sandbox_utils import is_in_vm, isolate_network, restore_network

class TestResult:
    def __init__(self, name: str, passed: bool, error: str = None):
        self.name = name
        self.passed = passed
        self.error = error

class MalwareAnalyzerTester:
    def __init__(self):
        self.logger = setup_logging('data/logs')
        self.results: List[TestResult] = []
        self.create_test_directories()

    def create_test_directories(self):
        """Create necessary test directories"""
        directories = [
            'data/logs',
            'data/samples',
            'data/memory_dumps',
            'data/reports',
            'data/workspace'
        ]
        for directory in directories:
            create_safe_directory(directory)

    def create_test_sample(self) -> str:
        """Create a test file for analysis"""
        sample_path = 'data/samples/test_sample.exe'
        with open(sample_path, 'wb') as f:
            f.write(b'MZ' + b'\x00' * 1024)  # Simple PE file header
        return sample_path

    async def run_all_tests(self):
        """Run all system tests"""
        test_functions = [
            self.test_imports,
            self.test_utils,
            self.test_static_analyzer,
            self.test_dynamic_analyzer,
            self.test_memory_analyzer,
            self.test_network_analyzer,
            self.test_ml_detector,
            self.test_intel_analyzer,
            self.test_orchestrator
        ]

        for test_func in test_functions:
            try:
                await test_func() if asyncio.iscoroutinefunction(test_func) else test_func()
            except Exception as e:
                self.results.append(TestResult(
                    test_func.__name__,
                    False,
                    str(e)
                ))

    def test_imports(self):
        """Test all imports"""
        self.logger.info("Testing imports...")
        try:
            import pefile
            import yara
            import numpy
            import sklearn
            import volatility3
            import scapy
            self.results.append(TestResult("imports", True))
        except Exception as e:
            self.results.append(TestResult("imports", False, str(e)))

    def test_utils(self):
        """Test utility functions"""
        self.logger.info("Testing utilities...")
        try:
            # Test file utils
            test_dir = "data/test_dir"
            create_safe_directory(test_dir)
            
            # Test hash utils
            sample_path = self.create_test_sample()
            hashes = calculate_hashes(sample_path)
            assert all(k in hashes for k in ['md5', 'sha1', 'sha256'])
            
            # Test string utils
            test_text = "test@email.com http://test.com 192.168.1.1"
            iocs = extract_iocs(test_text)
            assert len(iocs['emails']) > 0
            
            # Test sandbox utils
            vm_status = is_in_vm()
            
            self.results.append(TestResult("utils", True))
        except Exception as e:
            self.results.append(TestResult("utils", False, str(e)))

    async def test_static_analyzer(self):
        """Test static analyzer"""
        self.logger.info("Testing static analyzer...")
        try:
            sample_path = self.create_test_sample()
            analyzer = StaticAnalyzer(sample_path)
            results = analyzer.analyze()
            assert isinstance(results, dict)
            self.results.append(TestResult("static_analyzer", True))
        except Exception as e:
            self.results.append(TestResult("static_analyzer", False, str(e)))

    async def test_dynamic_analyzer(self):
        """Test dynamic analyzer"""
        self.logger.info("Testing dynamic analyzer...")
        try:
            sample_path = self.create_test_sample()
            analyzer = DynamicAnalyzer(sample_path)
            results = analyzer.analyze()
            assert isinstance(results, dict)
            self.results.append(TestResult("dynamic_analyzer", True))
        except Exception as e:
            self.results.append(TestResult("dynamic_analyzer", False, str(e)))

    async def test_memory_analyzer(self):
        """Test memory analyzer"""
        self.logger.info("Testing memory analyzer...")
        try:
            memory_dump = "data/memory_dumps/test.dmp"
            Path(memory_dump).touch()
            analyzer = MemoryAnalyzer(memory_dump)
            results = analyzer.analyze()
            assert isinstance(results, dict)
            self.results.append(TestResult("memory_analyzer", True))
        except Exception as e:
            self.results.append(TestResult("memory_analyzer", False, str(e)))

    async def test_network_analyzer(self):
        """Test network analyzer"""
        self.logger.info("Testing network analyzer...")
        try:
            analyzer = NetworkAnalyzer()
            results = analyzer.analyze()
            assert isinstance(results, dict)
            self.results.append(TestResult("network_analyzer", True))
        except Exception as e:
            self.results.append(TestResult("network_analyzer", False, str(e)))

    async def test_ml_detector(self):
        """Test ML detector"""
        self.logger.info("Testing ML detector...")
        try:
            sample_path = self.create_test_sample()
            detector = MLDetector()
            results = await detector.analyze(sample_path)
            assert isinstance(results, dict)
            self.results.append(TestResult("ml_detector", True))
        except Exception as e:
            self.results.append(TestResult("ml_detector", False, str(e)))

    async def test_intel_analyzer(self):
        """Test threat intelligence analyzer"""
        self.logger.info("Testing intel analyzer...")
        try:
            api_keys = {'virustotal': 'test', 'alienvault': 'test'}
            analyzer = IntelAnalyzer(api_keys)
            sample_path = self.create_test_sample()
            results = await analyzer.analyze(sample_path)
            assert isinstance(results, dict)
            self.results.append(TestResult("intel_analyzer", True))
        except Exception as e:
            self.results.append(TestResult("intel_analyzer", False, str(e)))

    async def test_orchestrator(self):
        """Test orchestrator"""
        self.logger.info("Testing orchestrator...")
        try:
            config = {
                'api_keys': {'virustotal': 'test', 'alienvault': 'test'},
                'timeout': 30,
                'max_memory': 1024 * 1024 * 1024
            }
            orchestrator = MalwareAnalysisOrchestrator(config)
            sample_path = self.create_test_sample()
            results = await orchestrator.run_analysis(sample_path)
            assert isinstance(results, dict)
            self.results.append(TestResult("orchestrator", True))
        except Exception as e:
            self.results.append(TestResult("orchestrator", False, str(e)))

    def print_results(self):
        """Print test results"""
        print("\nTest Results:")
        print("-" * 50)
        passed = sum(1 for r in self.results if r.passed)
        total = len(self.results)
        
        for result in self.results:
            status = "PASS" if result.passed else "FAIL"
            print(f"{result.name}: {status}")
            if not result.passed and result.error:
                print(f"  Error: {result.error}")
        
        print("-" * 50)
        print(f"Total Tests: {total}")
        print(f"Passed: {passed}")
        print(f"Failed: {total - passed}")
        print(f"Success Rate: {(passed/total)*100:.1f}%")

async def main():
    print("Starting comprehensive malware analyzer tests...")
    tester = MalwareAnalyzerTester()
    await tester.run_all_tests()
    tester.print_results()

if __name__ == "__main__":
    asyncio.run(main())